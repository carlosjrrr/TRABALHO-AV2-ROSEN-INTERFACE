{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMEp5TrPH+79ePBPvp0fcCQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/carlosjrrr/TRABALHO-AV2-ROSEN-INTERFACE/blob/master/Trabalho2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 749
        },
        "id": "3w77hIp-yACI",
        "outputId": "ac49f228-bdeb-4538-ded9-2aa86c3941d3"
      },
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1mModel: \"sequential\"\u001b[0m\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">896</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │           <span style=\"color: #00af00; text-decoration-color: #00af00\">9,248</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4096</span>)                │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │       <span style=\"color: #00af00; text-decoration-color: #00af00\">2,097,664</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">5,130</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ],
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │             \u001b[38;5;34m896\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │           \u001b[38;5;34m9,248\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m18,496\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m36,928\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4096\u001b[0m)                │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │       \u001b[38;5;34m2,097,664\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)                  │           \u001b[38;5;34m5,130\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,168,362</span> (8.27 MB)\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,168,362\u001b[0m (8.27 MB)\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,168,362</span> (8.27 MB)\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,168,362\u001b[0m (8.27 MB)\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ],
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m312s\u001b[0m 395ms/step - accuracy: 0.3454 - loss: 1.7766 - val_accuracy: 0.5920 - val_loss: 1.1214\n",
            "Epoch 2/5\n",
            "\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m330s\u001b[0m 406ms/step - accuracy: 0.5918 - loss: 1.1435 - val_accuracy: 0.6434 - val_loss: 1.0008\n",
            "Epoch 3/5\n",
            "\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m314s\u001b[0m 397ms/step - accuracy: 0.6601 - loss: 0.9627 - val_accuracy: 0.7092 - val_loss: 0.8268\n",
            "Epoch 4/5\n",
            "\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m323s\u001b[0m 397ms/step - accuracy: 0.7038 - loss: 0.8432 - val_accuracy: 0.7371 - val_loss: 0.7609\n",
            "Epoch 5/5\n",
            "\u001b[1m782/782\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m322s\u001b[0m 398ms/step - accuracy: 0.7269 - loss: 0.7733 - val_accuracy: 0.7472 - val_loss: 0.7212\n"
          ]
        }
      ],
      "source": [
        "# Importando as bibliotecas necessárias\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.datasets import cifar10\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "\n",
        "# Carregando o dataset CIFAR-10\n",
        "(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n",
        "\n",
        "# Normalizando os valores dos pixels para a faixa [0, 1]\n",
        "x_train, x_test = x_train / 255.0, x_test / 255.0\n",
        "\n",
        "# Convertendo os labels para formato one-hot encoding\n",
        "y_train = to_categorical(y_train, 10)\n",
        "y_test = to_categorical(y_test, 10)\n",
        "\n",
        "# Definindo a arquitetura da MiniVGGNet\n",
        "model = Sequential()\n",
        "\n",
        "# Bloco Convolucional 1\n",
        "model.add(Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3)))\n",
        "model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(Dropout(0.25))\n",
        "\n",
        "# Bloco Convolucional 2\n",
        "model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\n",
        "model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(Dropout(0.25))\n",
        "\n",
        "# Camada de Flatten e Camada densa\n",
        "model.add(Flatten())\n",
        "model.add(Dense(512, activation='relu'))\n",
        "model.add(Dropout(0.5))\n",
        "\n",
        "# Camada de Saída\n",
        "model.add(Dense(10, activation='softmax'))\n",
        "\n",
        "# Compilando o modelo\n",
        "optimizer = Adam(learning_rate=0.001)\n",
        "model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Exibindo o resumo do modelo\n",
        "model.summary()\n",
        "\n",
        "# Treinando o modelo\n",
        "history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=5, batch_size=64)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importando as bibliotecas necessárias\n",
        "from sklearn.metrics import classification_report\n",
        "import numpy as np\n",
        "\n",
        "# Nome das classes do CIFAR-10\n",
        "nomeDosRotulos = [\"avião\", \"carro\", \"pássaro\", \"gato\", \"cervo\", \"cachorro\", \"sapo\", \"cavalo\", \"navio\", \"caminhão\"]\n",
        "\n",
        "# Carregando o dataset CIFAR-10\n",
        "from tensorflow.keras.datasets import cifar10\n",
        "(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n",
        "\n",
        "# Normalizando os valores dos pixels para a faixa [0, 1]\n",
        "x_test = x_test / 255.0\n",
        "\n",
        "# Convertendo os labels para formato one-hot encoding\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "y_test = to_categorical(y_test, 10)\n",
        "\n",
        "# Fazendo as previsões no conjunto de teste\n",
        "predicao = model.predict(x_test)\n",
        "\n",
        "# Gerando o relatório de classificação\n",
        "# y_test.argmax(axis=1) pega o índice da classe verdadeira\n",
        "# predicao.argmax(axis=1) pega o índice da classe prevista\n",
        "print(classification_report(y_test.argmax(axis=1), predicao.argmax(axis=1), target_names=nomeDosRotulos))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HvcgB3De98aN",
        "outputId": "b4a61461-b663-490b-8402-7b94ae0ae5e6"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 52ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       avião       0.78      0.78      0.78      1000\n",
            "       carro       0.85      0.89      0.87      1000\n",
            "     pássaro       0.67      0.58      0.62      1000\n",
            "        gato       0.61      0.49      0.54      1000\n",
            "       cervo       0.69      0.71      0.70      1000\n",
            "    cachorro       0.61      0.69      0.65      1000\n",
            "        sapo       0.74      0.85      0.79      1000\n",
            "      cavalo       0.81      0.79      0.80      1000\n",
            "       navio       0.88      0.84      0.86      1000\n",
            "    caminhão       0.82      0.86      0.84      1000\n",
            "\n",
            "    accuracy                           0.75     10000\n",
            "   macro avg       0.75      0.75      0.74     10000\n",
            "weighted avg       0.75      0.75      0.74     10000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Obtendo as previsões do modelo para o conjunto de teste\n",
        "y_pred = model.predict(x_test)\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)\n",
        "y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Calculando a matriz de confusão\n",
        "conf_matrix = confusion_matrix(y_true, y_pred_classes)\n",
        "\n",
        "# Visualizando a matriz de confusão\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=range(10), yticklabels=range(10))\n",
        "plt.xlabel('Predito')\n",
        "plt.ylabel('Real')\n",
        "plt.title('Matriz de Confusão para CIFAR-10')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 735
        },
        "id": "jiJLZaAo2DB4",
        "outputId": "ac2e1f38-c68a-442d-fa56-b551a01df6f2"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 59ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Acurácia\n",
        "plt.plot(history.history['accuracy'], label='Acurácia Treinamento')\n",
        "plt.plot(history.history['val_accuracy'], label='Acurácia Validação')\n",
        "plt.xlabel('Época')\n",
        "plt.ylabel('Acurácia')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Perda\n",
        "plt.plot(history.history['loss'], label='Perda Treinamento')\n",
        "plt.plot(history.history['val_loss'], label='Perda Validação')\n",
        "plt.xlabel('Época')\n",
        "plt.ylabel('Perda')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 885
        },
        "id": "a5xGKyCzyZ1W",
        "outputId": "8388cbe1-9a63-4e83-ecd9-fe729474a685"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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n+Or6ueo83N8leEcq12HYhEREanadOVGREREqhSFGxEREalSFG5ERESkSlG4ERERkSpF4aaUJkyYQEREBB4eHkRFRbF69epi2//yyy80a9YMDw8PWrduzZw5cyqo0otTmvObPHkyFoulyObh4VGB1ZbOkiVLGDhwICEhIVgsFmbMmHHBYxYtWkSHDh1wd3encePGTJ48udzrvBSlPcdFixad9RlaLBZSUlIqpuBSiI6OpnPnzvj6+hIYGMigQYPYsmXLBY9zpN/BizlHR/o9/PTTT2nTpo19creuXbvyxx9/FHuMI31+UPpzdKTP71zeeustLBYLjz/+eLHtKvpzVLgphSlTpvDkk0/y8ssvExsbS9u2benbty+pqannbL98+XJuu+027r33XtatW8egQYMYNGgQGzZsqODKS6a05we2GSiTk5Pt2+7duyuw4tLJysqibdu2TJgwoUTtExMT6d+/P7169SIuLo7HH3+c++67jz///LOcK714pT3Hk7Zs2VLkcwwMDCynCi/e4sWLGTFiBCtXrmT+/Pnk5+fzf//3f2RlZZ33GEf7HbyYcwTH+T2sV68eb731FjExMaxdu5bevXtz/fXXs3HjxnO2d7TPD0p/juA4n9+Z1qxZw2effUabNm2KbWfK52hIiXXp0sUYMWKE/XFhYaEREhJiREdHn7P9zTffbPTv37/IvqioKOPBBx8s1zovVmnPb9KkSYa/v38FVVe2AGP69OnFtnn22WeNli1bFtl3yy23GH379i3HyspOSc7x77//NgDj6NGjFVJTWUpNTTUAY/Hixedt42i/g2cqyTk68u+hYRhGzZo1jS+++OKczzn653dScefoqJ9fRkaG0aRJE2P+/PlGjx49jMcee+y8bc34HHXlpoTy8vKIiYmhT58+9n1OTk706dOHFStWnPOYFStWFGkP0Ldv3/O2N9PFnB9AZmYm9evXJyws7IL/OnE0jvT5Xap27dpRt25drr76apYtW2Z2OSWSlpYGQEBAwHnbOPpnWJJzBMf8PSwsLOSnn34iKyuLrl27nrONo39+JTlHcMzPb8SIEfTv3/+sz+dczPgcFW5K6NChQxQWFhIUFFRkf1BQ0Hn7J6SkpJSqvZku5vwiIyP56quv+O233/juu++wWq1069aNvXv3VkTJ5e58n196ejrHjx83qaqyVbduXSZOnMjUqVOZOnUqYWFh9OzZk9jYWLNLK5bVauXxxx+ne/futGrV6rztHOl38EwlPUdH+z2Mj4/Hx8cHd3d3hg8fzvTp02nRosU52zrq51eac3S0zw/gp59+IjY2lujo6BK1N+NzrHargkvZ6dq1a5F/jXTr1o3mzZvz2Wef8dprr5lYmZRUZGQkkZGR9sfdunVjx44dvP/++3z77bcmVla8ESNGsGHDBpYuXWp2KeWmpOfoaL+HkZGRxMXFkZaWxq+//srQoUNZvHjxeb/8HVFpztHRPr89e/bw2GOPMX/+/Erd8VnhpoRq166Ns7MzBw4cKLL/wIEDBAcHn/OY4ODgUrU308Wc35lcXV1p374927dvL48SK9z5Pj8/Pz88PT1Nqqr8denSpVKHhpEjR/L777+zZMkS6tWrV2xbR/odPF1pzvFMlf330M3NjcaNGwPQsWNH1qxZwwcffMBnn312VltH/fxKc45nquyfX0xMDKmpqXTo0MG+r7CwkCVLlvDxxx+Tm5uLs7NzkWPM+Bx1W6qE3Nzc6NixIwsXLrTvs1qtLFy48Lz3Urt27VqkPcD8+fOLvfdqlos5vzMVFhYSHx9P3bp1y6vMCuVIn19ZiouLq5SfoWEYjBw5kunTp/PXX3/RoEGDCx7jaJ/hxZzjmRzt99BqtZKbm3vO5xzt8zuf4s7xTJX987vqqquIj48nLi7OvnXq1Ik77riDuLi4s4INmPQ5lltX5Srop59+Mtzd3Y3JkycbmzZtMh544AGjRo0aRkpKimEYhnHXXXcZo0aNsrdftmyZ4eLiYrz77rtGQkKC8fLLLxuurq5GfHy8WadQrNKe3yuvvGL8+eefxo4dO4yYmBjj1ltvNTw8PIyNGzeadQrFysjIMNatW2esW7fOAIxx48YZ69atM3bv3m0YhmGMGjXKuOuuu+ztd+7caXh5eRnPPPOMkZCQYEyYMMFwdnY25s6da9YpXFBpz/H99983ZsyYYWzbts2Ij483HnvsMcPJyclYsGCBWadwXg899JDh7+9vLFq0yEhOTrZv2dnZ9jaO/jt4MefoSL+Ho0aNMhYvXmwkJiYa//77rzFq1CjDYrEY8+bNMwzD8T8/wyj9OTrS53c+Z46Wqgyfo8JNKX300UdGeHi44ebmZnTp0sVYuXKl/bkePXoYQ4cOLdL+559/Npo2bWq4ubkZLVu2NGbPnl3BFZdOac7v8ccft7cNCgoyrr32WiM2NtaEqkvm5LDnM7eT5zR06FCjR48eZx3Trl07w83NzWjYsKExadKkCq+7NEp7jm+//bbRqFEjw8PDwwgICDB69uxp/PXXX+YUfwHnOi+gyGfi6L+DF3OOjvR7eM899xj169c33NzcjDp16hhXXXWV/UvfMBz/8zOM0p+jI31+53NmuKkMn6PFMAyj/K4LiYiIiFQs9bkRERGRKkXhRkRERKoUhRsRERGpUhRuREREpEpRuBEREZEqReFGREREqhSFGxEREalSFG5ERESkSlG4EZFK5bHHHuOBBx7AarWaXYqIOCiFGxGpNPbs2UNkZCSfffYZTk7635OIXBwtvyAiIiJViv5pJCKmGzZsGBaL5aytX79+ZpcmIg7IxewCREQA+vXrx6RJk4rsc3d3N6kaEXFkunIjIpWCu7s7wcHBRbaaNWsCYLFY+PTTT7nmmmvw9PSkYcOG/Prrr0WOj4+Pp3fv3nh6elKrVi0eeOABMjMzi7T56quvaNmyJe7u7tStW5eRI0fanxs3bhytW7fG29ubsLAwHn744bOOFxHHoHAjIg5hzJgx3Hjjjaxfv5477riDW2+9lYSEBACysrLo27cvNWvWZM2aNfzyyy8sWLCgSHj59NNPGTFiBA888ADx8fHMnDmTxo0b2593cnLiww8/ZOPGjXz99df89ddfPPvssxV+niJSBgwREZMNHTrUcHZ2Nry9vYtsb7zxhmEYhgEYw4cPL3JMVFSU8dBDDxmGYRiff/65UbNmTSMzM9P+/OzZsw0nJycjJSXFMAzDCAkJMV544YUS1/TLL78YtWrVutRTExETqM+NiFQKvXr14tNPPy2yLyAgwP7nrl27Fnmua9euxMXFAZCQkEDbtm3x9va2P9+9e3esVitbtmzBYrGwf/9+rrrqqvO+/4IFC4iOjmbz5s2kp6dTUFBATk4O2dnZeHl5lcEZikhF0W0pEakUvL29ady4cZHt9HBzKTw9PYt9fteuXQwYMIA2bdowdepUYmJimDBhAgB5eXllUoOIVByFGxFxCCtXrjzrcfPmzQFo3rw569evJysry/78smXLcHJyIjIyEl9fXyIiIli4cOE5XzsmJgar1cp7773HZZddRtOmTdm/f3/5nYyIlCvdlhKRSiE3N5eUlJQi+1xcXKhduzYAv/zyC506deLyyy/n+++/Z/Xq1Xz55ZcA3HHHHbz88ssMHTqUsWPHcvDgQR555BHuuusugoKCABg7dizDhw8nMDCQa665hoyMDJYtW8YjjzxC48aNyc/P56OPPmLgwIEsW7aMiRMnVuwPQETKjtmdfkREhg4dagBnbZGRkYZh2DoUT5gwwbj66qsNd3d3IyIiwpgyZUqR1/j333+NXr16GR4eHkZAQIBx//33GxkZGUXaTJw40YiMjDRcXV2NunXrGo888oj9uXHjxhl169Y1PD09jb59+xrffPONARhHjx4t9/MXkbKl5RdEpNKzWCxMnz6dQYMGmV2KiDgA9bkRERGRKkXhRkRERKoUdSgWkUpPd89FpDR05UZERESqFIUbERERqVIUbkRERKRKUbgRERGRKkXhRkRERKoUhRsRERGpUhRuREREpEpRuBEREZEq5f8B+ISJXPOktOsAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Arquitetura ResNet-20 para CIFAR-10\n",
        "\n",
        "# Arquitetura ResNet-20 para CIFAR-10:\n",
        "#\n",
        "#| Tipo de Camada             | Descrição                                                      | Parâmetros                                    |\n",
        "# |----------------------------|-------------------------------------------------               |-----------------------------------------------|\n",
        "# |Entrada                    | Imagens 32 x 32 x 3 (RGB)                                      | -                                             |\n",
        "# |CONV                       | 16 filtros (3 x 3), Stride 1                                   | Ativação ReLU                                 |\n",
        "# | Residual Block x3          | Cada bloco: duas camadas convolucionais com 16 filtros (3 x 3) | Conexão direta (skip connection)              |\n",
        "# | CONV                       | 32 filtros (3 x 3), Stride 2                                   | Ativação ReLU, reduz dimensão da imagem       |\n",
        "# | Residual Block x3          | Cada bloco: duas camadas convolucionais com 32 filtros (3 x 3) | Conexão direta (skip connection)              |\n",
        "# | CONV                       | 64 filtros (3 x 3), Stride 2                                   | Ativação ReLU, reduz dimensão da imagem       |\n",
        "# | Residual Block x3          | Cada bloco: duas camadas convolucionais com 64 filtros (3 x 3) | Conexão direta (skip connection)              |\n",
        "# | Average Pooling           | Redução média de 8x8 para 1x1                                  | -                                             |\n",
        "# | Flatten                    | Vetor de features                                              | -                                             |\n",
        "# | Dense                      | 10 unidades (para 10 classes), ativação SoftMax                | -                                             |"
      ],
      "metadata": {
        "id": "Dxg1xq2u294M"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, models\n",
        "\n",
        "def resnet_block(x, filters, kernel_size=(3, 3), stride=1):\n",
        "    # Bloco residual que contém 2 camadas convolucionais com a mesma quantidade de filtros\n",
        "    shortcut = x  # Conexão residual\n",
        "\n",
        "    # Primeira camada convolucional\n",
        "    x = layers.Conv2D(filters, kernel_size, strides=stride, padding='same')(x)\n",
        "    x = layers.BatchNormalization()(x)\n",
        "    x = layers.ReLU()(x)\n",
        "\n",
        "    # Segunda camada convolucional\n",
        "    x = layers.Conv2D(filters, kernel_size, strides=stride, padding='same')(x)\n",
        "    x = layers.BatchNormalization()(x)\n",
        "\n",
        "    # Conexão residual (skip connection)\n",
        "    x = layers.add([x, shortcut])  # Adiciona a entrada (shortcut) ao resultado da convolução\n",
        "\n",
        "    # Ativação após a soma\n",
        "    x = layers.ReLU()(x)\n",
        "\n",
        "    return x\n",
        "\n",
        "def resnet_20(input_shape=(32, 32, 3), num_classes=10):\n",
        "    inputs = layers.Input(shape=input_shape)\n",
        "\n",
        "    # Camada inicial\n",
        "    x = layers.Conv2D(16, (3, 3), padding='same', strides=1)(inputs)\n",
        "    x = layers.BatchNormalization()(x)\n",
        "    x = layers.ReLU()(x)\n",
        "\n",
        "    # Blocos residuais 1 com 16 filtros\n",
        "    for _ in range(3):\n",
        "        x = resnet_block(x, 16)\n",
        "\n",
        "    # Transição para 32 filtros\n",
        "    x = layers.Conv2D(32, (3, 3), padding='same', strides=2)(x)\n",
        "    x = layers.BatchNormalization()(x)\n",
        "    x = layers.ReLU()(x)\n",
        "\n",
        "    # Blocos residuais 2 com 32 filtros\n",
        "    for _ in range(3):\n",
        "        x = resnet_block(x, 32)\n",
        "\n",
        "    # Transição para 64 filtros\n",
        "    x = layers.Conv2D(64, (3, 3), padding='same', strides=2)(x)\n",
        "    x = layers.BatchNormalization()(x)\n",
        "    x = layers.ReLU()(x)\n",
        "\n",
        "    # Blocos residuais 3 com 64 filtros\n",
        "    for _ in range(3):\n",
        "        x = resnet_block(x, 64)\n",
        "\n",
        "    # Camada de pooling global\n",
        "    x = layers.GlobalAveragePooling2D()(x)\n",
        "\n",
        "    # Camada densa final\n",
        "    x = layers.Dense(num_classes, activation='softmax')(x)\n",
        "\n",
        "    # Modelo final\n",
        "    model = models.Model(inputs, x)\n",
        "\n",
        "    return model\n",
        "\n",
        "# Criando e compilando o modelo\n",
        "model = resnet_20()\n",
        "\n",
        "# Resumo do modelo\n",
        "model.summary()\n",
        "\n",
        "# Compilando o modelo\n",
        "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "4LcIfG5nCu4W",
        "outputId": "fd76e6ec-8775-41d4-b429-7a75b0be5ed3"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"functional_12\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_12\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m       Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to          \u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_1             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m3\u001b[0m)      │              \u001b[38;5;34m0\u001b[0m │ -                      │\n",
              "│ (\u001b[38;5;33mInputLayer\u001b[0m)              │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_4 (\u001b[38;5;33mConv2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │            \u001b[38;5;34m448\u001b[0m │ input_layer_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │             \u001b[38;5;34m64\u001b[0m │ conv2d_4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization[\u001b[38;5;34m0\u001b[0m… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_5 (\u001b[38;5;33mConv2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │          \u001b[38;5;34m2,320\u001b[0m │ re_lu[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_1     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │             \u001b[38;5;34m64\u001b[0m │ conv2d_5[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_1 (\u001b[38;5;33mReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_6 (\u001b[38;5;33mConv2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │          \u001b[38;5;34m2,320\u001b[0m │ re_lu_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_2     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │             \u001b[38;5;34m64\u001b[0m │ conv2d_6[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add (\u001b[38;5;33mAdd\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_2… │\n",
              "│                           │                        │                │ re_lu[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_2 (\u001b[38;5;33mReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ add[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]              │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_7 (\u001b[38;5;33mConv2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │          \u001b[38;5;34m2,320\u001b[0m │ re_lu_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_3     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │             \u001b[38;5;34m64\u001b[0m │ conv2d_7[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_3 (\u001b[38;5;33mReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_3… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_8 (\u001b[38;5;33mConv2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │          \u001b[38;5;34m2,320\u001b[0m │ re_lu_3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_4     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │             \u001b[38;5;34m64\u001b[0m │ conv2d_8[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_1 (\u001b[38;5;33mAdd\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_4… │\n",
              "│                           │                        │                │ re_lu_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_4 (\u001b[38;5;33mReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ add_1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_9 (\u001b[38;5;33mConv2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │          \u001b[38;5;34m2,320\u001b[0m │ re_lu_4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_5     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │             \u001b[38;5;34m64\u001b[0m │ conv2d_9[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_5 (\u001b[38;5;33mReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_5… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_10 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │          \u001b[38;5;34m2,320\u001b[0m │ re_lu_5[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_6     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │             \u001b[38;5;34m64\u001b[0m │ conv2d_10[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_2 (\u001b[38;5;33mAdd\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_6… │\n",
              "│                           │                        │                │ re_lu_4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_6 (\u001b[38;5;33mReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m16\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ add_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_11 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │          \u001b[38;5;34m4,640\u001b[0m │ re_lu_6[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_7     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │            \u001b[38;5;34m128\u001b[0m │ conv2d_11[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_7 (\u001b[38;5;33mReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_7… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_12 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │          \u001b[38;5;34m9,248\u001b[0m │ re_lu_7[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_8     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │            \u001b[38;5;34m128\u001b[0m │ conv2d_12[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_8 (\u001b[38;5;33mReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_8… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_13 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │          \u001b[38;5;34m9,248\u001b[0m │ re_lu_8[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_9     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │            \u001b[38;5;34m128\u001b[0m │ conv2d_13[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_3 (\u001b[38;5;33mAdd\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_9… │\n",
              "│                           │                        │                │ re_lu_7[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_9 (\u001b[38;5;33mReLU\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ add_3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_14 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │          \u001b[38;5;34m9,248\u001b[0m │ re_lu_9[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_10    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │            \u001b[38;5;34m128\u001b[0m │ conv2d_14[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_10 (\u001b[38;5;33mReLU\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_15 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │          \u001b[38;5;34m9,248\u001b[0m │ re_lu_10[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_11    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │            \u001b[38;5;34m128\u001b[0m │ conv2d_15[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_4 (\u001b[38;5;33mAdd\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_1… │\n",
              "│                           │                        │                │ re_lu_9[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_11 (\u001b[38;5;33mReLU\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ add_4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_16 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │          \u001b[38;5;34m9,248\u001b[0m │ re_lu_11[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_12    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │            \u001b[38;5;34m128\u001b[0m │ conv2d_16[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_12 (\u001b[38;5;33mReLU\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_17 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │          \u001b[38;5;34m9,248\u001b[0m │ re_lu_12[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_13    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │            \u001b[38;5;34m128\u001b[0m │ conv2d_17[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_5 (\u001b[38;5;33mAdd\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_1… │\n",
              "│                           │                        │                │ re_lu_11[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_13 (\u001b[38;5;33mReLU\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │              \u001b[38;5;34m0\u001b[0m │ add_5[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_18 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │         \u001b[38;5;34m18,496\u001b[0m │ re_lu_13[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_14    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │            \u001b[38;5;34m256\u001b[0m │ conv2d_18[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_14 (\u001b[38;5;33mReLU\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_19 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │         \u001b[38;5;34m36,928\u001b[0m │ re_lu_14[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_15    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │            \u001b[38;5;34m256\u001b[0m │ conv2d_19[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_15 (\u001b[38;5;33mReLU\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_20 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │         \u001b[38;5;34m36,928\u001b[0m │ re_lu_15[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_16    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │            \u001b[38;5;34m256\u001b[0m │ conv2d_20[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_6 (\u001b[38;5;33mAdd\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_1… │\n",
              "│                           │                        │                │ re_lu_14[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_16 (\u001b[38;5;33mReLU\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ add_6[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_21 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │         \u001b[38;5;34m36,928\u001b[0m │ re_lu_16[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_17    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │            \u001b[38;5;34m256\u001b[0m │ conv2d_21[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_17 (\u001b[38;5;33mReLU\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_22 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │         \u001b[38;5;34m36,928\u001b[0m │ re_lu_17[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_18    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │            \u001b[38;5;34m256\u001b[0m │ conv2d_22[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_7 (\u001b[38;5;33mAdd\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_1… │\n",
              "│                           │                        │                │ re_lu_16[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_18 (\u001b[38;5;33mReLU\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ add_7[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_23 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │         \u001b[38;5;34m36,928\u001b[0m │ re_lu_18[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_19    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │            \u001b[38;5;34m256\u001b[0m │ conv2d_23[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_19 (\u001b[38;5;33mReLU\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_24 (\u001b[38;5;33mConv2D\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │         \u001b[38;5;34m36,928\u001b[0m │ re_lu_19[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_20    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │            \u001b[38;5;34m256\u001b[0m │ conv2d_24[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_8 (\u001b[38;5;33mAdd\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ batch_normalization_2… │\n",
              "│                           │                        │                │ re_lu_18[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_20 (\u001b[38;5;33mReLU\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │              \u001b[38;5;34m0\u001b[0m │ add_8[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ global_average_pooling2d  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │              \u001b[38;5;34m0\u001b[0m │ re_lu_20[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n",
              "│ (\u001b[38;5;33mGlobalAveragePooling2D\u001b[0m)  │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │            \u001b[38;5;34m650\u001b[0m │ global_average_poolin… │\n",
              "└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)              </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">        Param # </span>┃<span style=\"font-weight: bold\"> Connected to           </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_1             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)      │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                      │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)              │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │            <span style=\"color: #00af00; text-decoration-color: #00af00\">448</span> │ input_layer_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │ conv2d_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">2,320</span> │ re_lu[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_1     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │ conv2d_5[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">2,320</span> │ re_lu_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_2     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │ conv2d_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Add</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_2… │\n",
              "│                           │                        │                │ re_lu[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ add[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]              │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">2,320</span> │ re_lu_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_3     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │ conv2d_7[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_3… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">2,320</span> │ re_lu_3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_4     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │ conv2d_8[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Add</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_4… │\n",
              "│                           │                        │                │ re_lu_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ add_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">2,320</span> │ re_lu_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_5     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │ conv2d_9[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_5… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">2,320</span> │ re_lu_5[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_6     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │ conv2d_10[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Add</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_6… │\n",
              "│                           │                        │                │ re_lu_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ add_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">4,640</span> │ re_lu_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_7     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │            <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │ conv2d_11[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_7… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">9,248</span> │ re_lu_7[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_8     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │            <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │ conv2d_12[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_8… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_13 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">9,248</span> │ re_lu_8[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_9     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │            <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │ conv2d_13[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Add</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_9… │\n",
              "│                           │                        │                │ re_lu_7[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ add_3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">9,248</span> │ re_lu_9[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_10    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │            <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │ conv2d_14[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_15 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">9,248</span> │ re_lu_10[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_11    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │            <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │ conv2d_15[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Add</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_1… │\n",
              "│                           │                        │                │ re_lu_9[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]          │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ add_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">9,248</span> │ re_lu_11[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_12    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │            <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │ conv2d_16[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_17 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │          <span style=\"color: #00af00; text-decoration-color: #00af00\">9,248</span> │ re_lu_12[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_13    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │            <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │ conv2d_17[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Add</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_1… │\n",
              "│                           │                        │                │ re_lu_11[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_13 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ add_5[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_18 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │ re_lu_13[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_14    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │            <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │ conv2d_18[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_19 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │ re_lu_14[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_15    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │            <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │ conv2d_19[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_15 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_20 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │ re_lu_15[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_16    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │            <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │ conv2d_20[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Add</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_1… │\n",
              "│                           │                        │                │ re_lu_14[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ add_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_21 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │ re_lu_16[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_17    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │            <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │ conv2d_21[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_17 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_22 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │ re_lu_17[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_18    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │            <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │ conv2d_22[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Add</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_1… │\n",
              "│                           │                        │                │ re_lu_16[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_18 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ add_7[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_23 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │ re_lu_18[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_19    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │            <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │ conv2d_23[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_19 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_1… │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ conv2d_24 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │ re_lu_19[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ batch_normalization_20    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │            <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │ conv2d_24[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)      │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ add_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Add</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalization_2… │\n",
              "│                           │                        │                │ re_lu_18[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ re_lu_20 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ add_8[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ global_average_pooling2d  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │              <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ re_lu_20[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling2D</span>)  │                        │                │                        │\n",
              "├───────────────────────────┼────────────────────────┼────────────────┼────────────────────────┤\n",
              "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │            <span style=\"color: #00af00; text-decoration-color: #00af00\">650</span> │ global_average_poolin… │\n",
              "└───────────────────────────┴────────────────────────┴────────────────┴────────────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m318,346\u001b[0m (1.21 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">318,346</span> (1.21 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m316,778\u001b[0m (1.21 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">316,778</span> (1.21 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m1,568\u001b[0m (6.12 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,568</span> (6.12 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Carregar os dados CIFAR-10\n",
        "(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()\n",
        "\n",
        "# Pré-processamento (normalização)\n",
        "x_train, x_test = x_train / 255.0, x_test / 255.0\n",
        "\n",
        "# Treinar o modelo\n",
        "model.fit(x_train, y_train, epochs=1, batch_size=64, validation_data=(x_test, y_test))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bzoAyH7J4-I_",
        "outputId": "ac24fae4-116d-43d8-bcff-8ebcf070ee80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m510/782\u001b[0m \u001b[32m━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━\u001b[0m \u001b[1m4:18\u001b[0m 951ms/step - accuracy: 0.3522 - loss: 1.7596"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Avaliar o modelo\n",
        "test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)\n",
        "print(f\"Test accuracy: {test_acc}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "DqcdqH5F5CL1",
        "outputId": "3d442f2c-9888-44fd-df16-eba8702ca2bb"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'model' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-d320971a2015>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Avaliar o modelo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtest_loss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Test accuracy: {test_acc}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import seaborn as sns\n",
        "\n",
        "# Prever os rótulos das imagens de teste\n",
        "y_pred = model.predict(x_test)\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)  # Obtém a classe com maior probabilidade\n",
        "\n",
        "# Gerar a matriz de confusão\n",
        "cm = confusion_matrix(y_test, y_pred_classes)\n",
        "\n",
        "# Plotar a matriz de confusão\n",
        "plt.figure(figsize=(10, 7))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=np.arange(10), yticklabels=np.arange(10))\n",
        "plt.xlabel('Classe Predita')\n",
        "plt.ylabel('Classe Real')\n",
        "plt.title('Matriz de Confusão')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "lqVfg-4O63He",
        "outputId": "5a92af10-5025-4bf5-aa60-296346052c29"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'model' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-d5a8fc93ff79>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Prever os rótulos das imagens de teste\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0my_pred_classes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Obtém a classe com maior probabilidade\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"
          ]
        }
      ]
    }
  ]
}